#include "mainwindow.h"
#include "ui_mainwindow.h"

#define steps 6
#define dir 16
#define en 5
#define hm_sen 23

#define stepssm 21
#define dirsm 26
#define ensm 20
#define hm_sensm 24

#define LED_PWM 12
#define LED_BASE 200

#define dataPin 19
#define clockPin 18
#define latchPin 13

#define speed 10

// int speed = 10;

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    DEV_Module_Init();
    wiringPiSetup ();
    pinMode (en, OUTPUT) ;
    pinMode (dir, OUTPUT) ;
    pinMode (steps, OUTPUT) ;
    pinMode (hm_sen, INPUT) ;
    digitalWrite(en,HIGH);

    pinMode (ensm, OUTPUT) ;
    pinMode (dirsm, OUTPUT) ;
    pinMode (stepssm, OUTPUT) ;
    pinMode (hm_sensm, INPUT) ;
    digitalWrite(ensm,HIGH);

    sr595Setup (LED_BASE, 8, dataPin, clockPin, latchPin) ;
    pinMode (LED_PWM, PWM_OUTPUT);
    digitalWrite(LED_PWM,1024);
}

MainWindow::~MainWindow()
{
    delete ui;
}


void MainWindow::on_pushButton_clicked()
{//    UDOUBLE ADC[10];
   // UDOUBLE adc1,adc2;
    //int k=0;
//    UWORD i;

  ADS1263_SetMode(0);

    if(ADS1263_init_ADC1(ADS1263_10SPS) == 1) {
        printf("\r\n END \r\n");
        DEV_Module_Exit();
        exit(0);
    }
//    while(k<1)
//    {

//    adc1=ADS1263_GetChannalValue(0);
//    adc2=ADS1263_GetChannalValue(1);
//    //qDebug()<<k<<" "<<adc1;
//    qDebug()<<k<<" "<<adc1<<" "<<adc2;
//    k++;
//    }
    qDebug()<<"done init/fset calibration";

}

void MainWindow::on_pushButton_2_clicked()
{
    UDOUBLE adc1,adc2;
    int k=0;
    while(k<500)
    {
    adc1=ADS1263_GetChannalValue(0);
    adc2=ADS1263_GetChannalValue(1);
    qDebug()<<k<<" "<<adc1<<" "<<adc2;
    k++;
    }
}

void MainWindow::on_pushButton_3_clicked()
{
    UWORD i;
    #define ChannelNumber 8
    #define REF         5.08
        UBYTE ChannelList[ChannelNumber] = {0, 1, 2, 3, 4, 5, 6, 7};    // The channel must be less than 10

        UDOUBLE Value[ChannelNumber] = {0};
        while(1)
        {
            ADS1263_GetAll(ChannelList, Value, ChannelNumber);  // Get ADC1 value
            for(i=0; i<8; i++)
            {
                if((Value[i]>>31) == 1){
                  // qDebug()<<"IN" << i <<(REF*2 - Value[i]/2147483648.0 * REF);      //7fffffff + 1

            }
                else
                {
                    qDebug()<<"IN" << i <<(Value[i]/2147483647.0 * REF);       //7fffffff

                }
            }
        }
}

void MainWindow::on_pushButton_4_clicked()
{
    digitalWrite(en,LOW);
    digitalWrite(dir,LOW);

    for (int i=0;i<70000;i++)
    {
        if(digitalRead(hm_sen)==0)
        {
            break;
        }
        else
        {
            digitalWrite(steps, HIGH);
            QThread::usleep(speed);
            digitalWrite(steps, LOW);
            QThread::usleep(speed);
        }
    }
digitalWrite(en,HIGH);
}


void MainWindow::on_pushButton_5_clicked()
{
    digitalWrite(en,LOW);
    digitalWrite(dir,HIGH);

    for (int i=0;i<65000;i++)
{
      digitalWrite(steps, HIGH);
      QThread::usleep(speed);
      digitalWrite(steps, LOW);
      QThread::usleep(speed);
    }
    digitalWrite(en,HIGH);
}

void MainWindow::on_pushButton_6_clicked()
{
    QString X2=ui->lineEdit->text();
    int intensity =X2.toInt();

    digitalWrite (LED_BASE + 0,LOW) ;
  //  digitalWrite (LED_BASE + 1,LOW) ;
    digitalWrite (LED_BASE + 2,LOW) ;
    digitalWrite (LED_BASE + 3,LOW) ;
    digitalWrite (LED_BASE + 4,LOW) ;
    digitalWrite (LED_BASE + 5,LOW) ;
    digitalWrite (LED_BASE + 6,LOW) ;
    digitalWrite (LED_BASE + 7,LOW) ;
    pwmWrite (LED_PWM, 1024);


//   digitalWrite (LED_BASE + 0,HIGH) ;
   digitalWrite (LED_BASE + 5,HIGH) ;
   //digitalWrite (LED_BASE + 2,HIGH) ;
 // digitalWrite (LED_BASE + 3,HIGH) ;
  //  digitalWrite (LED_BASE + 4,HIGH) ;
//   digitalWrite (LED_BASE + 5,HIGH) ;
  // digitalWrite (LED_BASE + 6,HIGH) ;
 // digitalWrite (LED_BASE + 7,HIGH) ;
     pwmWrite (LED_PWM, intensity);


     digitalWrite (LED_BASE + 1,LOW) ;
       pwmWrite (LED_PWM, intensity);
}

int MainWindow::adc()
{
  //  UWORD i;
    #define ChannelNumber 8
    #define REF         5.08
        UBYTE ChannelList[ChannelNumber] = {0, 1, 2, 3, 4, 5, 6, 7};    // The channel must be less than 10

        UDOUBLE Value[ChannelNumber] = {0};

            ADS1263_GetAll(ChannelList, Value, ChannelNumber);  // Get ADC1 value
                 for(int i=0;i<50;i++)
                 {
                    qDebug() << ChannelList[0] <<(Value[0]/2147483647.0 * REF) << ChannelList[1] << (Value[1]/2147483647.0 * REF)
                             << ChannelList[2] <<(Value[2]/2147483647.0 * REF) << ChannelList[3] << (Value[3]/2147483647.0 * REF)
                             << ChannelList[4] <<(Value[4]/2147483647.0 * REF) << ChannelList[5] << (Value[5]/2147483647.0 * REF)
                             << ChannelList[6] <<(Value[6]/2147483647.0 * REF) << ChannelList[7] << (Value[7]/2147483647.0 * REF);
                 }
}

int MainWindow::average_adc()
{
#define ChannelNumber 8
#define REF         5.08
#define num_of_data 50
#define num 50
    UBYTE ChannelList[ChannelNumber] = {0, 1, 2, 3, 4, 5, 6, 7};    // The channel must be less than 10

    UDOUBLE Value[ChannelNumber] = {0};

        ADS1263_GetAll(ChannelList, Value, ChannelNumber);  // Get ADC1 value
             for(int i=0;i<num_of_data;i++)
             {
                qDebug() << ChannelList[0] <<(((Value[0]/2147483647.0 * REF) * num)/num_of_data) << ChannelList[1] << (((Value[1]/2147483647.0 * REF) * num)/num_of_data)
                         << ChannelList[2] <<(((Value[2]/2147483647.0 * REF) * num)/num_of_data) << ChannelList[3] << (((Value[3]/2147483647.0 * REF) * num)/num_of_data)
                         << ChannelList[4] <<(((Value[4]/2147483647.0 * REF) * num)/num_of_data) << ChannelList[5] << (((Value[5]/2147483647.0 * REF) * num)/num_of_data)
                         << ChannelList[6] <<(((Value[6]/2147483647.0 * REF) * num)/num_of_data) << ChannelList[7] << (((Value[7]/2147483647.0 * REF) * num)/num_of_data);
             }

             qDebug() << ChannelList[0] <<(((Value[0]/2147483647.0 * REF) * num)/num_of_data) << ChannelList[1] << (((Value[1]/2147483647.0 * REF) * num)/num_of_data)
                      << ChannelList[2] <<(((Value[2]/2147483647.0 * REF) * num)/num_of_data) << ChannelList[3] << (((Value[3]/2147483647.0 * REF) * num)/num_of_data)
                      << ChannelList[4] <<(((Value[4]/2147483647.0 * REF) * num)/num_of_data) << ChannelList[5] << (((Value[5]/2147483647.0 * REF) * num)/num_of_data)
                      << ChannelList[6] <<(((Value[6]/2147483647.0 * REF) * num)/num_of_data) << ChannelList[7] << (((Value[7]/2147483647.0 * REF) * num)/num_of_data);
}

//void MainWindow::delay1(int i, int total)
//{

//    if (i < 90)
//    {
//      delayMicroseconds(100-i);//for stepper motor delay
//      qDebug()<<"c-1" << i;
//    }
//    else if (i > total - 90)
//    {
//      delayMicroseconds(speed++);//for stepper motor delay
//       qDebug()<<"c-2"<<i <<" "<< speed;
//    }
//    else
//    {
//      delayMicroseconds(speed);//for stepper motor delay
//       qDebug()<<"c-3"<<speed;
//    }
//}


void MainWindow::on_pushButton_9_clicked()
{
firstposi();

for(int i=0;i<12;i++)
{
    adc();
    digitalWrite(en,LOW);
    digitalWrite(dir,LOW);
    for(int i=2400;i>0;i--)
    {
        digitalWrite(steps, HIGH);
        QThread::usleep(speed);
        digitalWrite(steps, LOW);
        QThread::usleep(speed);

    }
    QThread::msleep(1000);
    digitalWrite(en,HIGH);
}
on_pushButton_4_clicked();
}

void MainWindow::on_pushButton_10_clicked()
{
    digitalWrite (LED_BASE + 0,LOW) ;
    digitalWrite (LED_BASE + 1,LOW) ;
    digitalWrite (LED_BASE + 2,LOW) ;
    digitalWrite (LED_BASE + 3,LOW) ;
    digitalWrite (LED_BASE + 4,LOW) ;
    digitalWrite (LED_BASE + 6,LOW) ;
    digitalWrite (LED_BASE + 7,LOW) ;
    pwmWrite (LED_PWM, 1024);

    on_pushButton_13_clicked();

    on_pushButton_11_clicked();

    firstpos();

    digitalWrite (LED_BASE + 0,LOW) ;
    digitalWrite (LED_BASE + 2,LOW) ;
    digitalWrite (LED_BASE + 3,LOW) ;
    digitalWrite (LED_BASE + 4,LOW) ;
    digitalWrite (LED_BASE + 5,LOW) ;
    digitalWrite (LED_BASE + 6,LOW) ;
    digitalWrite (LED_BASE + 7,LOW) ;
    pwmWrite (LED_PWM, 1024);

    digitalWrite (LED_BASE + 1,HIGH) ;
    pwmWrite (LED_PWM, 0);

    for(int i=0;i<12;i++)
    {
        adc();
        digitalWrite(en,LOW);
        digitalWrite(dir,HIGH);
        for(int i=0;i<2400;i++)
        {
            digitalWrite(steps, HIGH);
            QThread::usleep(speed);
            digitalWrite(steps, LOW);
            QThread::usleep(speed);
        }
        QThread::msleep(0);
        digitalWrite(en,HIGH);
    }
    digitalWrite (LED_BASE + 0,LOW) ;
    digitalWrite (LED_BASE + 1,LOW) ;
    digitalWrite (LED_BASE + 2,LOW) ;
    digitalWrite (LED_BASE + 3,LOW) ;
    digitalWrite (LED_BASE + 4,LOW) ;
    digitalWrite (LED_BASE + 6,LOW) ;
    digitalWrite (LED_BASE + 7,LOW) ;
    pwmWrite (LED_PWM, 1024);

    on_pushButton_13_clicked();
    
    on_pushButton_12_clicked();

    digitalWrite (LED_BASE + 5,HIGH) ;
    pwmWrite (LED_PWM, 0);


for(int i=0;i<12;i++)
{
    adc();

    digitalWrite(en,LOW);
    digitalWrite(dir,LOW);
    for(int i=2400;i>0;i--)
    {
        digitalWrite(steps, HIGH);
        QThread::usleep(speed);
        digitalWrite(steps, LOW);
        QThread::usleep(speed);
    }
    QThread::msleep(0);
    digitalWrite(en,HIGH);
}
digitalWrite (LED_BASE + 0,LOW) ;
digitalWrite (LED_BASE + 1,LOW) ;
digitalWrite (LED_BASE + 2,LOW) ;
digitalWrite (LED_BASE + 3,LOW) ;
digitalWrite (LED_BASE + 4,LOW) ;
digitalWrite (LED_BASE + 6,LOW) ;
digitalWrite (LED_BASE + 7,LOW) ;
pwmWrite (LED_PWM, 1024);

on_pushButton_4_clicked();

}

void MainWindow::firstpos()
{
    digitalWrite(en,LOW);
    digitalWrite(dir,HIGH);
    for(int i=0;i<31200;i++)
    {
        digitalWrite(steps, HIGH);
        QThread::usleep(speed);
        digitalWrite(steps, LOW);
        QThread::usleep(speed);
    }
    QThread::msleep(0);
    digitalWrite(en,HIGH);
}

void MainWindow::firstposi()
{
    digitalWrite(en,LOW);
    digitalWrite(dir,HIGH);
    for (int i=0;i<60400;i++)
    {
        digitalWrite(steps, HIGH);
        QThread::usleep(speed);
        digitalWrite(steps, LOW);
        QThread::usleep(speed);
    }
    QThread::msleep(0);
    digitalWrite(en,HIGH);
}

void MainWindow::on_pushButton_11_clicked()
{
    digitalWrite(ensm,LOW);
    digitalWrite(dirsm,LOW);
    for (int i=0;i<2000;i++)
    {
            digitalWrite(stepssm, HIGH);
            QThread::usleep(speed);
            digitalWrite(stepssm, LOW);
            QThread::usleep(speed);
    }
     digitalWrite(ensm,HIGH);

}

void MainWindow::on_pushButton_12_clicked()
{
    digitalWrite(ensm,LOW);
    digitalWrite(dirsm,LOW);
    for (int i=0;i<14900;i++)
    {
            digitalWrite(stepssm, HIGH);
            QThread::usleep(speed);
            digitalWrite(stepssm, LOW);
            QThread::usleep(speed);
    }
     digitalWrite(ensm,HIGH);
}

void MainWindow::on_pushButton_13_clicked()
{
    digitalWrite(ensm,LOW);
    digitalWrite(dirsm,HIGH);
    for (int i=0;i<72000;i++)
    {
        if(digitalRead(hm_sensm)==0)
        {
            break;
        }
        else
        {
        digitalWrite(stepssm, HIGH);
        QThread::usleep(speed);
        digitalWrite(stepssm, LOW);
        QThread::usleep(speed);
        }
    }
    digitalWrite(ensm,HIGH);
}

void MainWindow::on_pushButton_7_clicked()
{
     average_adc();
    qDebug()<<average_adc();
}

void MainWindow::on_pushButton_8_clicked()
{
        adc();
        QThread::msleep(1000);
        qDebug()<<adc();

}

void MainWindow::on_pushButton_14_clicked()
{
    digitalWrite(en,LOW);
    digitalWrite(dir,HIGH);
    for (int i=0;i<60400;i++)
    {
        digitalWrite(steps, HIGH);
        QThread::usleep(speed);
        digitalWrite(steps, LOW);
        QThread::usleep(speed);

    }
   // QThread::msleep(1000);
    digitalWrite(en,HIGH);
}

void MainWindow::on_pushButton_15_clicked()
{
    firstpos();
    for(int i=0;i<12;i++)
    {
        qDebug()<<i;
        adc();
        digitalWrite(en,LOW);
        digitalWrite(dir,HIGH);
        if(i!=11)
        {
        for(int i=0;i<2400;i++)
        {
            digitalWrite(steps, HIGH);
            QThread::usleep(speed);
            digitalWrite(steps, LOW);
            QThread::usleep(speed);
        }
        }
        digitalWrite(en,HIGH);
    }
     on_pushButton_4_clicked();

}

void MainWindow::on_pushButton_16_clicked()
{
    int intensity = ui->lineEdit_2->text().toInt();
    digitalWrite(en,LOW);
    digitalWrite(dir,HIGH);

    for (int i=0;i<intensity;i++)
{
      digitalWrite(steps, HIGH);
      QThread::usleep(speed);
      digitalWrite(steps, LOW);
      QThread::usleep(speed);
    }
    digitalWrite(en,HIGH);


}
